#include "Graph.h"
#include<Eigen/Dense>
#include "Range.h"
#include "PointNode.h"
#include "PolyhedronNode.h"

Graph graph_simple_test1()
{
	std::cout << "Simple Graph Test 1..." << std::endl;
	Graph graph;
	Eigen::Matrix<double, 4, 2> A0({ {1.,0.},{0., 1.},{-1.,0.},{0.,-1.} });
	Eigen::Vector<double, 4> b0({ 1.,1.,1.,1. });
	PolyhedronNode* node0 = new PolyhedronNode(A0, b0);
	graph.addNode(node0);
	Eigen::Matrix<double, 4, 2> A1({ {1.,0.},{0., 1.},{-1.,0.},{0.,-1.} });
	Eigen::Vector<double, 4> b1({ 2.,1.,-1.,1. });
	PolyhedronNode* node1 = new PolyhedronNode(A1, b1);
	graph.addNode(node1);
	Eigen::Matrix<double, 4, 2> A2({ {1.,0.},{0., 1.},{-1.,0.},{0.,-1.} });
	Eigen::Vector<double, 4> b2({ 2.,3.,1.,-1. });
	PolyhedronNode* node2 = new PolyhedronNode(A2, b2);
	graph.addNode(node2);
	Eigen::Matrix<double, 4, 2> A3({ {1.,0.},{0., 1.},{-1.,0.},{0.,-1.} });
	Eigen::Vector<double, 4> b3({ 4.,3.,-2.,1. });
	PolyhedronNode* node3 = new PolyhedronNode(A3, b3);
	graph.addNode(node3);
	std::vector<int> nodeKeys = graph.getNodeKeys();
	graph.addEdge(nodeKeys[0], nodeKeys[1]);
	graph.addEdge(nodeKeys[0], nodeKeys[2]);
	graph.addEdge(nodeKeys[1], nodeKeys[2]);
	graph.addEdge(nodeKeys[1], nodeKeys[3]);
	graph.addEdge(nodeKeys[2], nodeKeys[3]);
	graph.print();
	std::cout << "Successfully completed" << std::endl;
	return graph;
}

Graph graph_simple_test2()
{
	std::cout << "Simple Graph Test 2..." << std::endl;
	Graph graph;
	Eigen::Vector<double, 2> pstart({ -2.,-2. });
	PointNode* node0 = new PointNode(pstart);
	graph.addNode(node0);
	//Node 1 (center at (0,0))
	Eigen::Matrix<double, 4, 2> A1({ {1.,0.},{0.,1. },{-1.,0},{0.,-1.} });
	Eigen::Vector<double, 4> b1({ 1.,1.,1.,1. });
	PolyhedronNode* node1 = new PolyhedronNode(A1, b1);
	graph.addNode(node1);
	//Node 2 (center at (2,0))
	Eigen::Matrix<double, 4, 2> A2({ {1.,0.},{0.,1. },{-1.,0},{0.,-1.} });
	Eigen::Vector<double, 4> b2({ 3.,1.,-1.,1. });
	PolyhedronNode* node2 = new PolyhedronNode(A2, b2);
	graph.addNode(node2);
	//Target (node 3)
	Eigen::Vector<double, 2> ptarget({ 1.5,2. });
	PointNode* node3 = new PointNode(ptarget);
	graph.addNode(node3);
	std::vector<int> nodeKeys = graph.getNodeKeys();
	graph.addEdge(nodeKeys[0], nodeKeys[1]);
	graph.addEdge(nodeKeys[0], nodeKeys[2]);
	graph.addEdge(nodeKeys[1], nodeKeys[2]);
	graph.addEdge(nodeKeys[1], nodeKeys[3]);
	graph.addEdge(nodeKeys[2], nodeKeys[3]);
	graph.print();
	std::cout << "Successfully completed" << std::endl;
	return graph;
}

Graph graph_GCS_test()
{
	std::cout << "GCS Test..." << std::endl;
	Graph graph;
	Eigen::Matrix<double, 7, 2> A0({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b0({ 3.134441,4.368166,4.472645,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node0 = new PolyhedronNode(A0, b0);
	graph.addNode(node0);
	Eigen::Matrix<double, 6, 2> A1({ {-0.447214,-0.894427},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 6> b1({ -9.838699,-4.368166,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node1 = new PolyhedronNode(A1, b1);
	graph.addNode(node1);
	Eigen::Matrix<double, 7, 2> A2({ {0.975684,0.219180},{-0.164399,-0.986394},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b2({ -3.782521,3.123581,-4.472645,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node2 = new PolyhedronNode(A2, b2);
	graph.addNode(node2);
	Eigen::Matrix<double, 7, 2> A3({ {-0.947879,0.318630},{-1.000000,-0.000000},{0.447214,0.894427},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b3({ -6.945773,-7.000000,9.838699,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node3 = new PolyhedronNode(A3, b3);
	graph.addNode(node3);
	Eigen::Matrix<double, 7, 2> A4({ {0.876956,-0.480570},{-0.393919,0.919145},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b4({ 3.760376,-2.888742,-3.134441,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node4 = new PolyhedronNode(A4, b4);
	graph.addNode(node4);
	Eigen::Matrix<double, 7, 2> A5({ {-0.057434,-0.998349},{-0.975684,-0.219180},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b5({ -5.760362,3.782521,-4.472645,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node5 = new PolyhedronNode(A5, b5);
	graph.addNode(node5);
	Eigen::Matrix<double, 8, 2> A6({ {0.987924,0.154942},{-0.934022,-0.357216},{-0.876956,0.480570},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 8> b6({ 3.855021,0.989684,-3.760376,-3.134441,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node6 = new PolyhedronNode(A6, b6);
	graph.addNode(node6);
	Eigen::Matrix<double, 8, 2> A7({ {-0.707107,-0.707107},{0.057434,0.998349},{-0.975684,-0.219180},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 8> b7({ -1.414214,5.760362,3.782521,-4.472645,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node7 = new PolyhedronNode(A7, b7);
	graph.addNode(node7);
	Eigen::Matrix<double, 9, 2> A8({ {-0.903372,-0.428857},{0.987991,-0.154513},{0.707107,-0.707107},{-0.989463,0.144787},{0.554700,0.832050},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 9> b8({ -2.359359,7.066563,7.071068,-4.368166,6.101702,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node8 = new PolyhedronNode(A8, b8);
	graph.addNode(node8);
	Eigen::Matrix<double, 7, 2> A9({ {0.000000,1.000000},{-0.876956,0.480570},{0.934022,0.357216},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b9({ -8.000000,-3.760376,-0.989684,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node9 = new PolyhedronNode(A9, b9);
	graph.addNode(node9);
	Eigen::Matrix<double, 8, 2> A10({ {0.903372,0.428857},{1.000000,-0.000000},{-0.987924,-0.154942},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 8> b10({ 2.359359,5.000000,-3.855021,-4.368166,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node10 = new PolyhedronNode(A10, b10);
	graph.addNode(node10);
	Eigen::Matrix<double, 8, 2> A11({ {1.000000,0.000000},{-0.987924,-0.154942},{-0.918198,0.396121},{0.000000,1.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 8> b11({ 7.000000,-3.855021,-7.363839,-7.000000,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node11 = new PolyhedronNode(A11, b11);
	graph.addNode(node11);
	Eigen::Matrix<double, 7, 2> A12({ {-0.707107,0.707107},{-0.707107,-0.707107},{1.000000,-0.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b12({ -7.071068,-1.414214,7.000000,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node12 = new PolyhedronNode(A12, b12);
	graph.addNode(node12);
	Eigen::Matrix<double, 7, 2> A13({ {0.928477,-0.371391},{0.393919,-0.919145},{0.164399,0.986394},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 7> b13({ -5.756555,2.888742,-3.123581,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node13 = new PolyhedronNode(A13, b13);
	graph.addNode(node13);
	Eigen::Matrix<double, 11, 2> A14({ {-0.164399,-0.986394},{0.187845,0.982199},{-0.944799,0.327649},{0.707107,0.707107},{0.707107,-0.707107},{0.903372,0.428857},{1.000000,0.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 11> b14({ 3.123581,-3.134441,4.472645,1.414214,7.071068,2.359359,7.000000,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node14 = new PolyhedronNode(A14, b14);
	graph.addNode(node14);
	Eigen::Matrix<double, 8, 2> A15({ {0.947879,-0.318630},{0.554700,0.832050},{-0.987991,0.154513},{-0.707107,-0.707107},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 8> b15({ 6.945773,6.101702,-7.066563,-1.414214,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node15 = new PolyhedronNode(A15, b15);
	graph.addNode(node15);
	Eigen::Matrix<double, 8, 2> A16({ {0.447214,0.894427},{0.970143,-0.242536},{-0.989463,0.144787},{-0.187845,-0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 8> b16({ 9.838699,3.880570,-4.368166,3.134441,10.000000,10.000000,10.000000,10.000000 });
	PolyhedronNode* node16 = new PolyhedronNode(A16, b16);
	graph.addNode(node16);
	std::vector<int> nodeKeys = graph.getNodeKeys();
	graph.addEdge(nodeKeys[0], nodeKeys[1]);
	graph.addEdge(nodeKeys[0], nodeKeys[2]);
	graph.addEdge(nodeKeys[0], nodeKeys[4]);
	graph.addEdge(nodeKeys[0], nodeKeys[5]);
	graph.addEdge(nodeKeys[0], nodeKeys[6]);
	graph.addEdge(nodeKeys[0], nodeKeys[7]);
	graph.addEdge(nodeKeys[0], nodeKeys[8]);
	graph.addEdge(nodeKeys[0], nodeKeys[14]);
	graph.addEdge(nodeKeys[0], nodeKeys[16]);
	graph.addEdge(nodeKeys[1], nodeKeys[3]);
	graph.addEdge(nodeKeys[1], nodeKeys[16]);
	graph.addEdge(nodeKeys[2], nodeKeys[5]);
	graph.addEdge(nodeKeys[2], nodeKeys[13]);
	graph.addEdge(nodeKeys[2], nodeKeys[14]);
	graph.addEdge(nodeKeys[3], nodeKeys[8]);
	graph.addEdge(nodeKeys[3], nodeKeys[11]);
	graph.addEdge(nodeKeys[3], nodeKeys[12]);
	graph.addEdge(nodeKeys[3], nodeKeys[15]);
	graph.addEdge(nodeKeys[4], nodeKeys[6]);
	graph.addEdge(nodeKeys[4], nodeKeys[9]);
	graph.addEdge(nodeKeys[4], nodeKeys[13]);
	graph.addEdge(nodeKeys[5], nodeKeys[7]);
	graph.addEdge(nodeKeys[6], nodeKeys[8]);
	graph.addEdge(nodeKeys[6], nodeKeys[9]);
	graph.addEdge(nodeKeys[6], nodeKeys[10]);
	graph.addEdge(nodeKeys[6], nodeKeys[11]);
	graph.addEdge(nodeKeys[8], nodeKeys[10]);
	graph.addEdge(nodeKeys[8], nodeKeys[12]);
	graph.addEdge(nodeKeys[8], nodeKeys[15]);
	graph.addEdge(nodeKeys[10], nodeKeys[11]);
	graph.print();
	std::cout << "Successfully completed" << std::endl;
	return graph;
}

Graph graph_EGCS_test()
{
	std::cout << "Edge GCS Test..." << std::endl;
	Graph graph;
	Eigen::Matrix<double, 13, 2> A0({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.447214,-0.894427},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 13> b0({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,-9.837699,-4.367166,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node0 = new PolyhedronNode(A0, b0);
	graph.addNode(node0);
	Eigen::Matrix<double, 14, 2> A1({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.975684,0.219180},{-0.164399,-0.986394},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b1({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,-3.781521,3.124581,-4.471645,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node1 = new PolyhedronNode(A1, b1);
	graph.addNode(node1);
	Eigen::Matrix<double, 14, 2> A2({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.876956,-0.480570},{-0.393919,0.919145},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b2({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,3.761376,-2.887742,-3.133441,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node2 = new PolyhedronNode(A2, b2);
	graph.addNode(node2);
	Eigen::Matrix<double, 14, 2> A3({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.057434,-0.998349},{-0.975684,-0.219180},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b3({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,-5.759362,3.783521,-4.471645,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node3 = new PolyhedronNode(A3, b3);
	graph.addNode(node3);
	Eigen::Matrix<double, 15, 2> A4({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.987924,0.154942},{-0.934022,-0.357216},{-0.876956,0.480570},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b4({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,3.856021,0.990684,-3.759376,-3.133441,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node4 = new PolyhedronNode(A4, b4);
	graph.addNode(node4);
	Eigen::Matrix<double, 15, 2> A5({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.707107,-0.707107},{0.057434,0.998349},{-0.975684,-0.219180},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b5({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,-1.413214,5.761362,3.783521,-4.471645,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node5 = new PolyhedronNode(A5, b5);
	graph.addNode(node5);
	Eigen::Matrix<double, 16, 2> A6({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.903372,-0.428857},{0.987991,-0.154513},{0.707107,-0.707107},{-0.989463,0.144787},{0.554700,0.832050},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 16> b6({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,-2.358359,7.067563,7.072068,-4.367166,6.102702,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node6 = new PolyhedronNode(A6, b6);
	graph.addNode(node6);
	Eigen::Matrix<double, 18, 2> A7({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.164399,-0.986394},{0.187845,0.982199},{-0.944799,0.327649},{0.707107,0.707107},{0.707107,-0.707107},{0.903372,0.428857},{1.000000,0.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 18> b7({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,3.124581,-3.133441,4.473645,1.415214,7.072068,2.360359,7.001000,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node7 = new PolyhedronNode(A7, b7);
	graph.addNode(node7);
	Eigen::Matrix<double, 15, 2> A8({ {-0.187845,-0.982199},{0.989463,-0.144787},{-0.944799,0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.447214,0.894427},{0.970143,-0.242536},{-0.989463,0.144787},{-0.187845,-0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b8({ 3.135441,4.369166,4.473645,10.001000,10.001000,10.001000,10.001000,9.839699,3.881570,-4.367166,3.135441,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node8 = new PolyhedronNode(A8, b8);
	graph.addNode(node8);
	Eigen::Matrix<double, 13, 2> A9({ {-0.447214,-0.894427},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.947879,0.318630},{-1.000000,-0.000000},{0.447214,0.894427},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 13> b9({ -9.837699,-4.367166,10.001000,10.001000,10.001000,10.001000,-6.944773,-6.999000,9.839699,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node9 = new PolyhedronNode(A9, b9);
	graph.addNode(node9);
	Eigen::Matrix<double, 14, 2> A10({ {-0.447214,-0.894427},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.447214,0.894427},{0.970143,-0.242536},{-0.989463,0.144787},{-0.187845,-0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b10({ -9.837699,-4.367166,10.001000,10.001000,10.001000,10.001000,9.839699,3.881570,-4.367166,3.135441,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node10 = new PolyhedronNode(A10, b10);
	graph.addNode(node10);
	Eigen::Matrix<double, 14, 2> A11({ {0.975684,0.219180},{-0.164399,-0.986394},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.057434,-0.998349},{-0.975684,-0.219180},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b11({ -3.781521,3.124581,-4.471645,10.001000,10.001000,10.001000,10.001000,-5.759362,3.783521,-4.471645,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node11 = new PolyhedronNode(A11, b11);
	graph.addNode(node11);
	Eigen::Matrix<double, 14, 2> A12({ {0.975684,0.219180},{-0.164399,-0.986394},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.928477,-0.371391},{0.393919,-0.919145},{0.164399,0.986394},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b12({ -3.781521,3.124581,-4.471645,10.001000,10.001000,10.001000,10.001000,-5.755555,2.889742,-3.122581,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node12 = new PolyhedronNode(A12, b12);
	graph.addNode(node12);
	Eigen::Matrix<double, 18, 2> A13({ {0.975684,0.219180},{-0.164399,-0.986394},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.164399,-0.986394},{0.187845,0.982199},{-0.944799,0.327649},{0.707107,0.707107},{0.707107,-0.707107},{0.903372,0.428857},{1.000000,0.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 18> b13({ -3.781521,3.124581,-4.471645,10.001000,10.001000,10.001000,10.001000,3.124581,-3.133441,4.473645,1.415214,7.072068,2.360359,7.001000,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node13 = new PolyhedronNode(A13, b13);
	graph.addNode(node13);
	Eigen::Matrix<double, 16, 2> A14({ {-0.947879,0.318630},{-1.000000,-0.000000},{0.447214,0.894427},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.903372,-0.428857},{0.987991,-0.154513},{0.707107,-0.707107},{-0.989463,0.144787},{0.554700,0.832050},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 16> b14({ -6.944773,-6.999000,9.839699,10.001000,10.001000,10.001000,10.001000,-2.358359,7.067563,7.072068,-4.367166,6.102702,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node14 = new PolyhedronNode(A14, b14);
	graph.addNode(node14);
	Eigen::Matrix<double, 15, 2> A15({ {-0.947879,0.318630},{-1.000000,-0.000000},{0.447214,0.894427},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{1.000000,0.000000},{-0.987924,-0.154942},{-0.918198,0.396121},{0.000000,1.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b15({ -6.944773,-6.999000,9.839699,10.001000,10.001000,10.001000,10.001000,7.001000,-3.854021,-7.362839,-6.999000,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node15 = new PolyhedronNode(A15, b15);
	graph.addNode(node15);
	Eigen::Matrix<double, 14, 2> A16({ {-0.947879,0.318630},{-1.000000,-0.000000},{0.447214,0.894427},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.707107,0.707107},{-0.707107,-0.707107},{1.000000,-0.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b16({ -6.944773,-6.999000,9.839699,10.001000,10.001000,10.001000,10.001000,-7.070068,-1.413214,7.001000,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node16 = new PolyhedronNode(A16, b16);
	graph.addNode(node16);
	Eigen::Matrix<double, 15, 2> A17({ {-0.947879,0.318630},{-1.000000,-0.000000},{0.447214,0.894427},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.947879,-0.318630},{0.554700,0.832050},{-0.987991,0.154513},{-0.707107,-0.707107},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b17({ -6.944773,-6.999000,9.839699,10.001000,10.001000,10.001000,10.001000,6.946773,6.102702,-7.065563,-1.413214,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node17 = new PolyhedronNode(A17, b17);
	graph.addNode(node17);
	Eigen::Matrix<double, 15, 2> A18({ {0.876956,-0.480570},{-0.393919,0.919145},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.987924,0.154942},{-0.934022,-0.357216},{-0.876956,0.480570},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b18({ 3.761376,-2.887742,-3.133441,10.001000,10.001000,10.001000,10.001000,3.856021,0.990684,-3.759376,-3.133441,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node18 = new PolyhedronNode(A18, b18);
	graph.addNode(node18);
	Eigen::Matrix<double, 14, 2> A19({ {0.876956,-0.480570},{-0.393919,0.919145},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.000000,1.000000},{-0.876956,0.480570},{0.934022,0.357216},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b19({ 3.761376,-2.887742,-3.133441,10.001000,10.001000,10.001000,10.001000,-7.999000,-3.759376,-0.988684,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node19 = new PolyhedronNode(A19, b19);
	graph.addNode(node19);
	Eigen::Matrix<double, 14, 2> A20({ {0.876956,-0.480570},{-0.393919,0.919145},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.928477,-0.371391},{0.393919,-0.919145},{0.164399,0.986394},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 14> b20({ 3.761376,-2.887742,-3.133441,10.001000,10.001000,10.001000,10.001000,-5.755555,2.889742,-3.122581,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node20 = new PolyhedronNode(A20, b20);
	graph.addNode(node20);
	Eigen::Matrix<double, 15, 2> A21({ {-0.057434,-0.998349},{-0.975684,-0.219180},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.707107,-0.707107},{0.057434,0.998349},{-0.975684,-0.219180},{0.944799,-0.327649},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b21({ -5.759362,3.783521,-4.471645,10.001000,10.001000,10.001000,10.001000,-1.413214,5.761362,3.783521,-4.471645,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node21 = new PolyhedronNode(A21, b21);
	graph.addNode(node21);
	Eigen::Matrix<double, 17, 2> A22({ {0.987924,0.154942},{-0.934022,-0.357216},{-0.876956,0.480570},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.903372,-0.428857},{0.987991,-0.154513},{0.707107,-0.707107},{-0.989463,0.144787},{0.554700,0.832050},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 17> b22({ 3.856021,0.990684,-3.759376,-3.133441,10.001000,10.001000,10.001000,10.001000,-2.358359,7.067563,7.072068,-4.367166,6.102702,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node22 = new PolyhedronNode(A22, b22);
	graph.addNode(node22);
	Eigen::Matrix<double, 15, 2> A23({ {0.987924,0.154942},{-0.934022,-0.357216},{-0.876956,0.480570},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.000000,1.000000},{-0.876956,0.480570},{0.934022,0.357216},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 15> b23({ 3.856021,0.990684,-3.759376,-3.133441,10.001000,10.001000,10.001000,10.001000,-7.999000,-3.759376,-0.988684,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node23 = new PolyhedronNode(A23, b23);
	graph.addNode(node23);
	Eigen::Matrix<double, 16, 2> A24({ {0.987924,0.154942},{-0.934022,-0.357216},{-0.876956,0.480570},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.903372,0.428857},{1.000000,-0.000000},{-0.987924,-0.154942},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 16> b24({ 3.856021,0.990684,-3.759376,-3.133441,10.001000,10.001000,10.001000,10.001000,2.360359,5.001000,-3.854021,-4.367166,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node24 = new PolyhedronNode(A24, b24);
	graph.addNode(node24);
	Eigen::Matrix<double, 16, 2> A25({ {0.987924,0.154942},{-0.934022,-0.357216},{-0.876956,0.480570},{0.187845,0.982199},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{1.000000,0.000000},{-0.987924,-0.154942},{-0.918198,0.396121},{0.000000,1.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 16> b25({ 3.856021,0.990684,-3.759376,-3.133441,10.001000,10.001000,10.001000,10.001000,7.001000,-3.854021,-7.362839,-6.999000,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node25 = new PolyhedronNode(A25, b25);
	graph.addNode(node25);
	Eigen::Matrix<double, 17, 2> A26({ {-0.903372,-0.428857},{0.987991,-0.154513},{0.707107,-0.707107},{-0.989463,0.144787},{0.554700,0.832050},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.903372,0.428857},{1.000000,-0.000000},{-0.987924,-0.154942},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 17> b26({ -2.358359,7.067563,7.072068,-4.367166,6.102702,10.001000,10.001000,10.001000,10.001000,2.360359,5.001000,-3.854021,-4.367166,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node26 = new PolyhedronNode(A26, b26);
	graph.addNode(node26);
	Eigen::Matrix<double, 16, 2> A27({ {-0.903372,-0.428857},{0.987991,-0.154513},{0.707107,-0.707107},{-0.989463,0.144787},{0.554700,0.832050},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{-0.707107,0.707107},{-0.707107,-0.707107},{1.000000,-0.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 16> b27({ -2.358359,7.067563,7.072068,-4.367166,6.102702,10.001000,10.001000,10.001000,10.001000,-7.070068,-1.413214,7.001000,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node27 = new PolyhedronNode(A27, b27);
	graph.addNode(node27);
	Eigen::Matrix<double, 17, 2> A28({ {-0.903372,-0.428857},{0.987991,-0.154513},{0.707107,-0.707107},{-0.989463,0.144787},{0.554700,0.832050},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{0.947879,-0.318630},{0.554700,0.832050},{-0.987991,0.154513},{-0.707107,-0.707107},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 17> b28({ -2.358359,7.067563,7.072068,-4.367166,6.102702,10.001000,10.001000,10.001000,10.001000,6.946773,6.102702,-7.065563,-1.413214,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node28 = new PolyhedronNode(A28, b28);
	graph.addNode(node28);
	Eigen::Matrix<double, 16, 2> A29({ {0.903372,0.428857},{1.000000,-0.000000},{-0.987924,-0.154942},{-0.989463,0.144787},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000},{1.000000,0.000000},{-0.987924,-0.154942},{-0.918198,0.396121},{0.000000,1.000000},{-1.000000,0.000000},{1.000000,0.000000},{0.000000,-1.000000},{0.000000,1.000000} });
	Eigen::Vector<double, 16> b29({ 2.360359,5.001000,-3.854021,-4.367166,10.001000,10.001000,10.001000,10.001000,7.001000,-3.854021,-7.362839,-6.999000,10.001000,10.001000,10.001000,10.001000 });
	PolyhedronNode* node29 = new PolyhedronNode(A29, b29);
	graph.addNode(node29);
	Eigen::Matrix<double, 4, 2> A30({ {1.000000,0.000000},{0.000000,1.000000},{-1.000000,-0.000000},{-0.000000,-1.000000} });
	Eigen::Vector<double, 4> b30({ -5.000000,-8.000000,5.000000,8.000000 });
	PolyhedronNode* node30 = new PolyhedronNode(A30, b30);
	graph.addNode(node30);
	Eigen::Matrix<double, 4, 2> A31({ {1.000000,0.000000},{0.000000,1.000000},{-1.000000,-0.000000},{-0.000000,-1.000000} });
	Eigen::Vector<double, 4> b31({ 9.000000,8.500000,-9.000000,-8.500000 });
	PolyhedronNode* node31 = new PolyhedronNode(A31, b31);
	graph.addNode(node31);
	std::vector<int> nodeKeys = graph.getNodeKeys();
	graph.addEdge(nodeKeys[0], nodeKeys[1]);
	graph.addEdge(nodeKeys[0], nodeKeys[2]);
	graph.addEdge(nodeKeys[0], nodeKeys[3]);
	graph.addEdge(nodeKeys[0], nodeKeys[4]);
	graph.addEdge(nodeKeys[0], nodeKeys[5]);
	graph.addEdge(nodeKeys[0], nodeKeys[6]);
	graph.addEdge(nodeKeys[0], nodeKeys[7]);
	graph.addEdge(nodeKeys[0], nodeKeys[8]);
	graph.addEdge(nodeKeys[0], nodeKeys[9]);
	graph.addEdge(nodeKeys[0], nodeKeys[10]);
	graph.addEdge(nodeKeys[0], nodeKeys[31]);
	graph.addEdge(nodeKeys[1], nodeKeys[0]);
	graph.addEdge(nodeKeys[1], nodeKeys[2]);
	graph.addEdge(nodeKeys[1], nodeKeys[3]);
	graph.addEdge(nodeKeys[1], nodeKeys[4]);
	graph.addEdge(nodeKeys[1], nodeKeys[5]);
	graph.addEdge(nodeKeys[1], nodeKeys[6]);
	graph.addEdge(nodeKeys[1], nodeKeys[7]);
	graph.addEdge(nodeKeys[1], nodeKeys[8]);
	graph.addEdge(nodeKeys[1], nodeKeys[11]);
	graph.addEdge(nodeKeys[1], nodeKeys[12]);
	graph.addEdge(nodeKeys[1], nodeKeys[13]);
	graph.addEdge(nodeKeys[2], nodeKeys[0]);
	graph.addEdge(nodeKeys[2], nodeKeys[1]);
	graph.addEdge(nodeKeys[2], nodeKeys[3]);
	graph.addEdge(nodeKeys[2], nodeKeys[4]);
	graph.addEdge(nodeKeys[2], nodeKeys[5]);
	graph.addEdge(nodeKeys[2], nodeKeys[6]);
	graph.addEdge(nodeKeys[2], nodeKeys[7]);
	graph.addEdge(nodeKeys[2], nodeKeys[8]);
	graph.addEdge(nodeKeys[2], nodeKeys[18]);
	graph.addEdge(nodeKeys[2], nodeKeys[19]);
	graph.addEdge(nodeKeys[2], nodeKeys[20]);
	graph.addEdge(nodeKeys[3], nodeKeys[0]);
	graph.addEdge(nodeKeys[3], nodeKeys[1]);
	graph.addEdge(nodeKeys[3], nodeKeys[2]);
	graph.addEdge(nodeKeys[3], nodeKeys[4]);
	graph.addEdge(nodeKeys[3], nodeKeys[5]);
	graph.addEdge(nodeKeys[3], nodeKeys[6]);
	graph.addEdge(nodeKeys[3], nodeKeys[7]);
	graph.addEdge(nodeKeys[3], nodeKeys[8]);
	graph.addEdge(nodeKeys[3], nodeKeys[11]);
	graph.addEdge(nodeKeys[3], nodeKeys[21]);
	graph.addEdge(nodeKeys[4], nodeKeys[0]);
	graph.addEdge(nodeKeys[4], nodeKeys[1]);
	graph.addEdge(nodeKeys[4], nodeKeys[2]);
	graph.addEdge(nodeKeys[4], nodeKeys[3]);
	graph.addEdge(nodeKeys[4], nodeKeys[5]);
	graph.addEdge(nodeKeys[4], nodeKeys[6]);
	graph.addEdge(nodeKeys[4], nodeKeys[7]);
	graph.addEdge(nodeKeys[4], nodeKeys[8]);
	graph.addEdge(nodeKeys[4], nodeKeys[18]);
	graph.addEdge(nodeKeys[4], nodeKeys[22]);
	graph.addEdge(nodeKeys[4], nodeKeys[23]);
	graph.addEdge(nodeKeys[4], nodeKeys[24]);
	graph.addEdge(nodeKeys[4], nodeKeys[25]);
	graph.addEdge(nodeKeys[5], nodeKeys[0]);
	graph.addEdge(nodeKeys[5], nodeKeys[1]);
	graph.addEdge(nodeKeys[5], nodeKeys[2]);
	graph.addEdge(nodeKeys[5], nodeKeys[3]);
	graph.addEdge(nodeKeys[5], nodeKeys[4]);
	graph.addEdge(nodeKeys[5], nodeKeys[6]);
	graph.addEdge(nodeKeys[5], nodeKeys[7]);
	graph.addEdge(nodeKeys[5], nodeKeys[8]);
	graph.addEdge(nodeKeys[5], nodeKeys[21]);
	graph.addEdge(nodeKeys[6], nodeKeys[0]);
	graph.addEdge(nodeKeys[6], nodeKeys[1]);
	graph.addEdge(nodeKeys[6], nodeKeys[2]);
	graph.addEdge(nodeKeys[6], nodeKeys[3]);
	graph.addEdge(nodeKeys[6], nodeKeys[4]);
	graph.addEdge(nodeKeys[6], nodeKeys[5]);
	graph.addEdge(nodeKeys[6], nodeKeys[7]);
	graph.addEdge(nodeKeys[6], nodeKeys[8]);
	graph.addEdge(nodeKeys[6], nodeKeys[14]);
	graph.addEdge(nodeKeys[6], nodeKeys[22]);
	graph.addEdge(nodeKeys[6], nodeKeys[26]);
	graph.addEdge(nodeKeys[6], nodeKeys[27]);
	graph.addEdge(nodeKeys[6], nodeKeys[28]);
	graph.addEdge(nodeKeys[7], nodeKeys[0]);
	graph.addEdge(nodeKeys[7], nodeKeys[1]);
	graph.addEdge(nodeKeys[7], nodeKeys[2]);
	graph.addEdge(nodeKeys[7], nodeKeys[3]);
	graph.addEdge(nodeKeys[7], nodeKeys[4]);
	graph.addEdge(nodeKeys[7], nodeKeys[5]);
	graph.addEdge(nodeKeys[7], nodeKeys[6]);
	graph.addEdge(nodeKeys[7], nodeKeys[8]);
	graph.addEdge(nodeKeys[7], nodeKeys[13]);
	graph.addEdge(nodeKeys[8], nodeKeys[0]);
	graph.addEdge(nodeKeys[8], nodeKeys[1]);
	graph.addEdge(nodeKeys[8], nodeKeys[2]);
	graph.addEdge(nodeKeys[8], nodeKeys[3]);
	graph.addEdge(nodeKeys[8], nodeKeys[4]);
	graph.addEdge(nodeKeys[8], nodeKeys[5]);
	graph.addEdge(nodeKeys[8], nodeKeys[6]);
	graph.addEdge(nodeKeys[8], nodeKeys[7]);
	graph.addEdge(nodeKeys[8], nodeKeys[10]);
	graph.addEdge(nodeKeys[9], nodeKeys[0]);
	graph.addEdge(nodeKeys[9], nodeKeys[10]);
	graph.addEdge(nodeKeys[9], nodeKeys[14]);
	graph.addEdge(nodeKeys[9], nodeKeys[15]);
	graph.addEdge(nodeKeys[9], nodeKeys[16]);
	graph.addEdge(nodeKeys[9], nodeKeys[17]);
	graph.addEdge(nodeKeys[9], nodeKeys[31]);
	graph.addEdge(nodeKeys[10], nodeKeys[0]);
	graph.addEdge(nodeKeys[10], nodeKeys[8]);
	graph.addEdge(nodeKeys[10], nodeKeys[9]);
	graph.addEdge(nodeKeys[10], nodeKeys[31]);
	graph.addEdge(nodeKeys[11], nodeKeys[1]);
	graph.addEdge(nodeKeys[11], nodeKeys[3]);
	graph.addEdge(nodeKeys[11], nodeKeys[12]);
	graph.addEdge(nodeKeys[11], nodeKeys[13]);
	graph.addEdge(nodeKeys[11], nodeKeys[21]);
	graph.addEdge(nodeKeys[12], nodeKeys[1]);
	graph.addEdge(nodeKeys[12], nodeKeys[11]);
	graph.addEdge(nodeKeys[12], nodeKeys[13]);
	graph.addEdge(nodeKeys[12], nodeKeys[20]);
	graph.addEdge(nodeKeys[13], nodeKeys[1]);
	graph.addEdge(nodeKeys[13], nodeKeys[7]);
	graph.addEdge(nodeKeys[13], nodeKeys[11]);
	graph.addEdge(nodeKeys[13], nodeKeys[12]);
	graph.addEdge(nodeKeys[14], nodeKeys[6]);
	graph.addEdge(nodeKeys[14], nodeKeys[9]);
	graph.addEdge(nodeKeys[14], nodeKeys[15]);
	graph.addEdge(nodeKeys[14], nodeKeys[16]);
	graph.addEdge(nodeKeys[14], nodeKeys[17]);
	graph.addEdge(nodeKeys[14], nodeKeys[22]);
	graph.addEdge(nodeKeys[14], nodeKeys[26]);
	graph.addEdge(nodeKeys[14], nodeKeys[27]);
	graph.addEdge(nodeKeys[14], nodeKeys[28]);
	graph.addEdge(nodeKeys[15], nodeKeys[9]);
	graph.addEdge(nodeKeys[15], nodeKeys[14]);
	graph.addEdge(nodeKeys[15], nodeKeys[16]);
	graph.addEdge(nodeKeys[15], nodeKeys[17]);
	graph.addEdge(nodeKeys[15], nodeKeys[25]);
	graph.addEdge(nodeKeys[15], nodeKeys[29]);
	graph.addEdge(nodeKeys[16], nodeKeys[9]);
	graph.addEdge(nodeKeys[16], nodeKeys[14]);
	graph.addEdge(nodeKeys[16], nodeKeys[15]);
	graph.addEdge(nodeKeys[16], nodeKeys[17]);
	graph.addEdge(nodeKeys[16], nodeKeys[27]);
	graph.addEdge(nodeKeys[17], nodeKeys[9]);
	graph.addEdge(nodeKeys[17], nodeKeys[14]);
	graph.addEdge(nodeKeys[17], nodeKeys[15]);
	graph.addEdge(nodeKeys[17], nodeKeys[16]);
	graph.addEdge(nodeKeys[17], nodeKeys[28]);
	graph.addEdge(nodeKeys[18], nodeKeys[2]);
	graph.addEdge(nodeKeys[18], nodeKeys[4]);
	graph.addEdge(nodeKeys[18], nodeKeys[19]);
	graph.addEdge(nodeKeys[18], nodeKeys[20]);
	graph.addEdge(nodeKeys[18], nodeKeys[22]);
	graph.addEdge(nodeKeys[18], nodeKeys[23]);
	graph.addEdge(nodeKeys[18], nodeKeys[24]);
	graph.addEdge(nodeKeys[18], nodeKeys[25]);
	graph.addEdge(nodeKeys[19], nodeKeys[2]);
	graph.addEdge(nodeKeys[19], nodeKeys[18]);
	graph.addEdge(nodeKeys[19], nodeKeys[20]);
	graph.addEdge(nodeKeys[19], nodeKeys[23]);
	graph.addEdge(nodeKeys[20], nodeKeys[2]);
	graph.addEdge(nodeKeys[20], nodeKeys[12]);
	graph.addEdge(nodeKeys[20], nodeKeys[18]);
	graph.addEdge(nodeKeys[20], nodeKeys[19]);
	graph.addEdge(nodeKeys[21], nodeKeys[3]);
	graph.addEdge(nodeKeys[21], nodeKeys[5]);
	graph.addEdge(nodeKeys[21], nodeKeys[11]);
	graph.addEdge(nodeKeys[22], nodeKeys[4]);
	graph.addEdge(nodeKeys[22], nodeKeys[6]);
	graph.addEdge(nodeKeys[22], nodeKeys[14]);
	graph.addEdge(nodeKeys[22], nodeKeys[18]);
	graph.addEdge(nodeKeys[22], nodeKeys[23]);
	graph.addEdge(nodeKeys[22], nodeKeys[24]);
	graph.addEdge(nodeKeys[22], nodeKeys[25]);
	graph.addEdge(nodeKeys[22], nodeKeys[26]);
	graph.addEdge(nodeKeys[22], nodeKeys[27]);
	graph.addEdge(nodeKeys[22], nodeKeys[28]);
	graph.addEdge(nodeKeys[23], nodeKeys[4]);
	graph.addEdge(nodeKeys[23], nodeKeys[18]);
	graph.addEdge(nodeKeys[23], nodeKeys[19]);
	graph.addEdge(nodeKeys[23], nodeKeys[22]);
	graph.addEdge(nodeKeys[23], nodeKeys[24]);
	graph.addEdge(nodeKeys[23], nodeKeys[25]);
	graph.addEdge(nodeKeys[24], nodeKeys[4]);
	graph.addEdge(nodeKeys[24], nodeKeys[18]);
	graph.addEdge(nodeKeys[24], nodeKeys[22]);
	graph.addEdge(nodeKeys[24], nodeKeys[23]);
	graph.addEdge(nodeKeys[24], nodeKeys[25]);
	graph.addEdge(nodeKeys[24], nodeKeys[26]);
	graph.addEdge(nodeKeys[24], nodeKeys[29]);
	graph.addEdge(nodeKeys[25], nodeKeys[4]);
	graph.addEdge(nodeKeys[25], nodeKeys[15]);
	graph.addEdge(nodeKeys[25], nodeKeys[18]);
	graph.addEdge(nodeKeys[25], nodeKeys[22]);
	graph.addEdge(nodeKeys[25], nodeKeys[23]);
	graph.addEdge(nodeKeys[25], nodeKeys[24]);
	graph.addEdge(nodeKeys[25], nodeKeys[29]);
	graph.addEdge(nodeKeys[26], nodeKeys[6]);
	graph.addEdge(nodeKeys[26], nodeKeys[14]);
	graph.addEdge(nodeKeys[26], nodeKeys[22]);
	graph.addEdge(nodeKeys[26], nodeKeys[24]);
	graph.addEdge(nodeKeys[26], nodeKeys[27]);
	graph.addEdge(nodeKeys[26], nodeKeys[28]);
	graph.addEdge(nodeKeys[26], nodeKeys[29]);
	graph.addEdge(nodeKeys[27], nodeKeys[6]);
	graph.addEdge(nodeKeys[27], nodeKeys[14]);
	graph.addEdge(nodeKeys[27], nodeKeys[16]);
	graph.addEdge(nodeKeys[27], nodeKeys[22]);
	graph.addEdge(nodeKeys[27], nodeKeys[26]);
	graph.addEdge(nodeKeys[27], nodeKeys[28]);
	graph.addEdge(nodeKeys[28], nodeKeys[6]);
	graph.addEdge(nodeKeys[28], nodeKeys[14]);
	graph.addEdge(nodeKeys[28], nodeKeys[17]);
	graph.addEdge(nodeKeys[28], nodeKeys[22]);
	graph.addEdge(nodeKeys[28], nodeKeys[26]);
	graph.addEdge(nodeKeys[28], nodeKeys[27]);
	graph.addEdge(nodeKeys[29], nodeKeys[15]);
	graph.addEdge(nodeKeys[29], nodeKeys[24]);
	graph.addEdge(nodeKeys[29], nodeKeys[25]);
	graph.addEdge(nodeKeys[29], nodeKeys[26]);
	graph.addEdge(nodeKeys[30], nodeKeys[2]);
	graph.addEdge(nodeKeys[30], nodeKeys[18]);
	graph.addEdge(nodeKeys[30], nodeKeys[19]);
	graph.addEdge(nodeKeys[30], nodeKeys[20]);
	graph.print();
	std::cout << "Successfully completed" << std::endl;
	return graph;
}

int main(int argc, char** argv)
{
	Range* range = Range::getInstance();
	range->setRange(2, -10., 10.);
	graph_simple_test1();
	graph_simple_test2();
	graph_GCS_test();
	graph_EGCS_test();
	return 0;
}